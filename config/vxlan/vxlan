#!/bin/bash


__dir(){
  local SOURCE="${BASH_SOURCE[0]}"
  while [[ -h "$SOURCE" ]]; do
    local DIR=$(cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd)
    local SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  echo -n "$(cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd)"
}

__run(){
  local _c_tag="\033[38;05;39m"
  local _c_cmd="\033[38;05;245m"
  local _c_ok="\033[38;05;40m"
  local _c_fail="\033[38;05;161m"
  echo -ne "${_c_tag}[EXEC] ${_c_cmd}$* -> ["
  "$@" 1>/dev/null 2>/dev/null
  local n=$?
  [[ $n -eq 0 ]] && echo -ne "${_c_ok}${n}" || echo -ne "${_c_fail}${n}"
  echo -e "${_c_cmd}]\033[m"
  return ${n}
}

__echo() {
  local _c_tag="\033[38;05;39m"
  echo -e "${_c_tag}[INFO] $*"
}

DIR=$(__dir)

xCMD=$1
xNAME=$2

. ${DIR}/nets/${xNAME}.conf

LANID=${LANID:-}
LANGROUP=${LANGROUP:-}
LANDEV=${LANDEV:-}
LAN_MTU=${LAN_MTU:=1600}
LAN_VXMTU=$((LAN_MTU - 50))
LINKIP=${LINKIP:-}
REMOTES=${REMOTES:-}


add_bridge(){
__run /usr/sbin/ip link set dev "${LANDEV}" mtu ${LAN_MTU}
__run /usr/sbin/ip link add "br-${xNAME}" type bridge
__run /usr/sbin/ip link set mtu ${LAN_VXMTU} dev "br-${xNAME}"
__run /usr/sbin/ip addr add "${LINKIP}" dev "br-${xNAME}"
}

add_vxlan(){
if [[ -n ${REMOTES} ]]; then
  __echo "Using VxLAN remotes instead of dynamic group"
  __run /usr/sbin/ip link add "vxlan-${xNAME}" type vxlan id "${LANID}" dstport 4789 dev "${LANDEV}"
  for remote in ${REMOTES}; do
    __run  /usr/sbin/bridge fdb append to 00:00:00:00:00:00 dev "vxlan-${xNAME}" dst "${remote}" via "${LANDEV}"
  done
else
__run /usr/sbin/ip link add "vxlan-${xNAME}" type vxlan id "${LANID}" group "${LANGROUP}" dstport 4789 dev "${LANDEV}"
fi
__run /usr/sbin/ip link set mtu 1550 dev "vxlan-${xNAME}"
__run /usr/sbin/ip link set dev "vxlan-${xNAME}" master "br-${xNAME}"
__run /usr/sbin/ip link set "vxlan-${xNAME}" up
__run /usr/sbin/ip link set "br-${xNAME}" up
}

destroy() {
  __run /usr/sbin/ip link del "vxlan-${xNAME}"
  __run /usr/sbin/ip link del "br-${xNAME}"
}

reload() {
  if [[ -z ${REMOTES} ]]; then
    __info "No reload required, using VxLAN groups"
    return
  fi

  if __run /usr/sbin/bridge fdb show 00:00:00:00:00:00 dev "vxlan-${xNAME}"; then
    __run /usr/sbin/bridge fdb del "00:00:00:00:00:00" dev "vxlan-${xNAME}"
  fi

  for remote in ${REMOTES}; do
    __run  /usr/sbin/bridge fdb append to 00:00:00:00:00:00 dev "vxlan-${xNAME}" dst "${remote}" via "${LANDEV}"
  done
}

case ${xCMD} in
  create)
    add_bridge
    add_vxlan;;
  destroy)
    destroy;;
  reload)
    reload;;
  *)
    echo "Supported commands: create, destroy, reload";;
esac



# net.ipv4.ip_forward = 1

# #net.ipv6.ip_forward = 1
# net.ipv6.conf.all.forwarding = 1
# net.ipv6.conf.default.forwarding = 1