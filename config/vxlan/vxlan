#!/bin/bash

# Copyright 2022 FluffyContainers
# GitHub: https://github.com/FluffyContainers

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# shellcheck disable=SC1090,SC2015,SC2076

PATH=/usr/sbin:${PATH}

__dir(){
  local SOURCE="${BASH_SOURCE[0]}"
  while [[ -h "$SOURCE" ]]; do
    local DIR=$(cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd)
    local SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  echo -n "$(cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd)"
}

declare -A _COLOR=(
    [INFO]="\033[38;05;39m"
    [ERROR]="\033[38;05;161m"
    [WARN]="\033[38;05;178m"
    [OK]="\033[38;05;40m"
    [GRAY]="\033[38;05;245m"
    [RESET]="\033[m"
)

__run(){
  echo -ne "${_COLOR[INFO]}[EXEC] ${_COLOR[GRAY]}$* -> ["
  "$@" 1>/dev/null 2>/dev/null
  local n=$?
  [[ $n -eq 0 ]] && echo -e "${_COLOR[OK]}ok${_COLOR[GRAY]}]${_COLOR[RESET]}" || echo -e "${_COLOR[ERROR]}fail[#${n}]${_COLOR[GRAY]}]${_COLOR[RESET]}"
  return ${n}
  }

  __echo() {
  local _lvl="INFO"
  local _new_line=""

  [[ "${1^^}" == "-N" ]] && { local _new_line="n"; shift; }
  [[ "${1^^}" == "INFO" ]] || [[ "${1^^}" == "ERROR" ]] || [[ "${1^^}" == "WARN" ]] && { local _lvl=${1^^}; shift; }
  
  echo -${_new_line}e "${_COLOR[${_lvl}]}[${_lvl}]${_COLOR[RESET]} $*"
}

DIR=$(__dir)

xCMD=$1
xNAME=$2

[[ ! -f "/etc/vxlan/${xNAME}.conf" ]] && { __echo "ERROR" "Profile \"${xNAME}\" not found"; exit 1; } || true

. "/etc/vxlan/${xNAME}.conf"

LAN_DST_PORT=${LAN_DST_PORT:=4789}
VXLAN_ID=${VXLAN_ID:-}
VXLAN_GROUP=${VXLAN_GROUP:-}
VXLAN_IF_IP=${VXLAN_IF_IP:-}
VXLAN_IF_MTU=${VXLAN_IF_MTU:=1450}
VXLAN_REMOTES=${VXLAN_REMOTES:-}
LAN_IF=${LAN_IF:-}
LAN_MTU=$((VXLAN_IF_MTU + 50))


add_bridge(){
  __run ip link set dev "${LAN_IF}" mtu "${LAN_MTU}"
  __run ip link add "br-${xNAME}" type bridge
  __run ip link set mtu ${VXLAN_IF_MTU} dev "br-${xNAME}"
  __run ip addr add "${VXLAN_IF_IP}" dev "br-${xNAME}"
}

add_vxlan(){
  if [[ -n ${VXLAN_REMOTES} ]]; then
    local _local_ip=($(hostname -I))
    __echo "Using VxLAN VXLAN_REMOTES instead of dynamic group"
    __run ip link add "vxlan-${xNAME}" type vxlan id "${VXLAN_ID}" dstport "${LAN_DST_PORT}" dev "${LAN_IF}"
    for remote in ${VXLAN_REMOTES }; do
      [[ " ${_local_ip[*]} " =~ " ${remote} " ]] && continue
      __run bridge fdb append to 00:00:00:00:00:00 dev "vxlan-${xNAME}" dst "${remote}" via "${LAN_IF}"
    done
  else
    __run ip link add "vxlan-${xNAME}" type vxlan id "${VXLAN_ID}" group "${VXLAN_GROUP}" dstport "${LAN_DST_PORT}" dev "${LAN_IF}"
  fi

  __run ip link set mtu "${LAN_MTU}" dev "${LAN_IF}"

  __run ip link set mtu "${VXLAN_IF_MTU}" dev "vxlan-${xNAME}"
  __run ip link set dev "vxlan-${xNAME}" master "br-${xNAME}"
  __run ip link set "vxlan-${xNAME}" up
  __run ip link set "br-${xNAME}" up
  __run iptables -A INPUT -p udp -m udp --dport "${LAN_DST_PORT}" -i "${LAN_IF}" -j ACCEPT
}

destroy() {
  __run ip link del "vxlan-${xNAME}"
  __run ip link del "br-${xNAME}"
}

reload() {
  if [[ -z ${VXLAN_REMOTES} ]]; then
    __info "No reload required, using VxLAN groups"
    return
  fi

  if __run bridge fdb show 00:00:00:00:00:00 dev "vxlan-${xNAME}"; then
    __run bridge fdb del "00:00:00:00:00:00" dev "vxlan-${xNAME}"
  fi

  local _local_ip=($(hostname -I))
  for remote in ${VXLAN_REMOTES}; do
    [[ " ${_local_ip[*]} " =~ " ${remote} " ]] && continue
    __run  bridge fdb append to 00:00:00:00:00:00 dev "vxlan-${xNAME}" dst "${remote}" via "${LAN_IF}"
  done
}

dump(){
  tcpdump -l -n -i "${LAN_IF}" "port ${LAN_DST_PORT} and udp[11:4] = ${VXLAN_ID}"
}

case ${xCMD} in
  create)
    add_bridge
    add_vxlan;;
  destroy)
    destroy;;
  reload)
    reload;;
  dump)
    dump;;
  *)
    echo "Supported commands: create, destroy, reload";;
esac
